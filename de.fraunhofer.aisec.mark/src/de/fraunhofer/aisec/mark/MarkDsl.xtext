/**
 * This is the ANTLR/Xtext grammar definition for the MARK domain specific language. 
 */
grammar de.fraunhofer.aisec.mark.MarkDsl with org.eclipse.xtext.common.Terminals

generate markDsl "http://www.aisec.fraunhofer.de/mark/MarkDsl"


MarkModel:
    package=PackageDeclaration
    /* either an entity or a rule, multiple per file and in arbitrary order */
    ( decl+=EntityDeclaration | annotations+=AnnotationDeclaration | rule+=RuleDeclaration )+
;


/**
 * Package declaration in MARK
 */

PackageDeclaration:
    'package' name=DotQualifiedIdentifier
;


/**
 * Entity(-ies)
 */

EntityDeclaration:
    (annotations+=Annotation)* 'entity' name=DotQualifiedIdentifier ( 'isa' superType=[EntityDeclaration|DotQualifiedIdentifier] )? '{' content+=EntityStatement* '}'
;

EntityStatement:
    VariableDeclaration 
    | OpDeclaration 
;


/**
 * Grammar rules for variable declarations of a MARK entity
 */

VariableDeclaration:
    'var' name=ID ( ':' type=DotQualifiedIdentifier )? ';'
;


/**
 * Grammar rules for a operation declaration of a MARK entity
 */

OpDeclaration:
    'op' name=ID '{' (stmts+=OpStatement)* '}'
;

OpStatement:
    (forbidden='forbidden')? (var=ID '=')? call=FunctionDeclaration ';'
;

FunctionDeclaration:
    name=QualifiedName ( 
        '()' 
        | '(' (
                params+=WildcardParameter
                | ( params+=NamedParameter ( ',' params+=NamedParameter )* ( ',' params+=WildcardParameter )? )
            ) ')'
    )
;

WildcardParameter returns Parameter:
    var=ELLIPSIS
;

NamedParameter returns Parameter:
    var=ID ( ':' types+=Type ( '|' types+=Type )* )?
;

Type:
    UniversalType 
;

/*
 * This type rule at least enforces that users cannot mix Java and C++ style qualified name separator
 */
UniversalType:
    ID (('.' ID)+ | ('::' ID)+)? (Template)? ('*' | '&' | '[]')?
;

Template:
    '<' Type '>'
;


/**
 * Rule(s) in MARK
 */

RuleDeclaration:
	(annotations+=Annotation)* 'rule' name=ID '{' stmt=RuleStatement '}'
;

RuleStatement:
	'using' entities+=AliasedEntityExpression (',' entities+=AliasedEntityExpression)* (cond=ConditionStatement)? ensure=EnsureStatement (action=Action | 'onfail' msg=ID)
;

AliasedEntityExpression:
    e=[EntityDeclaration|DotQualifiedIdentifier] 'as' n=ID
;

ConditionStatement:
    'when' exp=LogicalOrExpression
;

EnsureStatement:
    'ensure' exp=Expression
;

enum Action:
	INFO='info' | WARN='warn' | FAIL='fail'
;


/**
 * Expression(s)
 */

Expression:
	LogicalOrExpression | OrderExpression
;

/*
 * Grammar rules for Boolean expressions
 * 
 * Specify a Boolean condition that is checked for validity during an evaluation of a MARK rule 
 */

LogicalOrExpression returns Expression:
	LogicalAndExpression ({LogicalOrExpression.left=current} op=('||') right=LogicalAndExpression)*
;

LogicalAndExpression returns Expression:
	ComparisonExpression ({LogicalAndExpression.left=current} op=('&&') right=ComparisonExpression)*
;

ComparisonExpression returns Expression:
    AdditionExpression ({ComparisonExpression.left=current} op=('=='|'!='|'<'|'<='|'>'|'>='|'in'|'like') right=AdditionExpression)*
;

AdditionExpression returns Expression:
	MultiplicationExpression ({AdditionExpression.left=current} op=('+'|'-'|'|'|'^') right=MultiplicationExpression)*
;

MultiplicationExpression returns Expression:
    PrimaryExpression ({MultiplicationExpression.left=current} op=('*'|'/'|'%'|'<<'|'>>'|'&'|'&^') right=PrimaryExpression)*
;

/* 
 * This is a little hack to avoid superfluous UnaryExpression nodes in the EObject AST. 
 * Now, UnaryExpression nodes are generated only if a unary operator is detected. 
 * In addition, we prevent expressions like '!!a'. 
 */
PrimaryExpression returns Expression:
	UnaryExpression
	| SimplifiedPrimaryExpression
;

UnaryExpression:
    op=('+'|'-'|'!'|'^') exp=SimplifiedPrimaryExpression 
;

SimplifiedPrimaryExpression returns Expression:
    Literal 
    | Operand 
    | FunctionCallExpression 
    | LiteralListExpression 
    | '(' LogicalOrExpression ')'
;

Operand:
    {Operand} operand=OperandName
;

OperandName:
    QualifiedName
;

FunctionCallExpression:
    name=QualifiedName ( '()' | '(' (args+=Argument (',' args+=Argument)*)? ')' )
;

Argument:
    LogicalOrExpression
;

LiteralListExpression:
    '[' values+=Literal (',' values+=Literal)* ']'
;


/*
 * Grammar rules for order expressions
 * 
 * Specify an order for operations of an entity 
 */

OrderExpression:
    {OrderExpression} 'order' exp=SequenceExpression
;

SequenceExpression returns OrderExpression:
    AlternativeExpression ({SequenceExpression.left=current} op=',' right=AlternativeExpression)*
;

AlternativeExpression returns OrderExpression:
    TermExpression ({AlternativeExpression.left=current} op='|' right=TermExpression)*
;

TermExpression returns OrderExpression:
    ExclusionExpression
    | RepetitionExpression
;

ExclusionExpression:
    op='!' exp=SimplifiedTermExpression
;

RepetitionExpression returns OrderExpression:
    SimplifiedTermExpression ({RepetitionExpression.expr=current} op=('?'|'*'|'+'))?
;

SimplifiedTermExpression returns OrderExpression:
    Terminal
    | GroupingExpression
;

Terminal:
    {Terminal} entity=ID '.' op=ID '()'
;

GroupingExpression returns OrderExpression:
    '(' SequenceExpression ')'
;


/**
 * Annotations
 */

AnnotationDeclaration:
	'annotation' name=ID '{' fields+=AnnotationField* '}'
;

AnnotationField:
	'var' name=ID ':' ('=' default=(Literal|LiteralListExpression))? ';'
;

Annotation:
	'@' name=[AnnotationDeclaration] ('(' args+=AnnotationArgument (',' args+=AnnotationArgument)* ')')?
;

AnnotationArgument:
	(field=ID '=')? value=(Literal | LiteralListExpression)
;

/**
 * Common rule(s)
 * 
 * Rules that are used by multiple other rules
 */

DotQualifiedIdentifier:
    ID ( '.' ID )*
;

QualifiedName:
	ID
	| JavaQualifiedName
	| CppQualifiedName
;
	
JavaQualifiedName:
    ID ('.' ID)+
;

CppQualifiedName:
    ID ('::' ID)+ 
;


/**
 * MARK types
 */
//enum MType:
//	BOOL='bool' | NUMERIC='numeric' | STR='string' | LIST='list'
//;

/**
 * Literal(s)
 */

Literal:
	{IntegerLiteral} value=IntegerLiteral 
	| {BooleanLiteral} value=BooleanLiteral 
	| {StringLiteral} value=StringLiteral
;

IntegerLiteral:
	INT	
	| HEX
;

BooleanLiteral:
	'true' 
	| 'false'
;

StringLiteral:
	STRING
;


/**
 * Additional token(s)
 */

terminal ELLIPSIS:
    '...'
;

terminal HEX:
	'0x' (HEX_DIGIT)+
;

terminal fragment HEX_DIGIT:
	DIGIT 
	| 'a'..'f' 
	| 'A'..'F'
;

terminal fragment DIGIT:
	'0'..'9' 
;
