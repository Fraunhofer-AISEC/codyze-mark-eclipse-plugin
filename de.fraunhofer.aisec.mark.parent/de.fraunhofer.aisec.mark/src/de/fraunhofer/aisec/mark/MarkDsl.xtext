/**
 * This is the ANTLR/Xtext grammar definition for the MARK domain specific language. 
 */
grammar de.fraunhofer.aisec.mark.MarkDsl with org.eclipse.xtext.common.Terminals

generate markDsl "http://www.aisec.fraunhofer.de/mark/MarkDsl"


MarkModel:
    package=PackageDeclaration
//	imports+=ImportDeclaration*
    /* either an entity or a rule, multiple per file and in arbitrary order */
    ( decl+=EntityDeclaration | rule+=RuleDeclaration )+
/*
	oids+=ObjectIdentifier*
	msg+=MessageDeclaration*
*/
;



PackageDeclaration:
    'package' name=DotQualifiedIdentifier
;



//ImportDeclaration:
//	'import' name=QualifiedName;



EntityDeclaration:
    'entity' name=QualifiedName ( 'isa' superType=[EntityDeclaration|QualifiedName] )? '{' content+=EntityStatement* '}'
;

EntityStatement:
    VariableDeclaration 
    | OpDeclaration 
;

VariableDeclaration:
    'var' name=ID ( ':' type=Type )? /* ( '=' init=InitializerExpression )? */ ';'
;

InitializerExpression:
	Literal | LiteralListExpression;




QualifiedName:
	ID
	| JavaQualifiedName
	| CppQualifiedName
;
	
JavaQualifiedName:
    ID ('.' ID)+
;

CppQualifiedName:
    ID ('::' ID)+ 
;

Type:
    UniversalType 
;

/*
 * This type rule at least enforces that users cannot mix Java and C++ style qualified name separator
 */
UniversalType:
    ID (('.' ID)+ | ('::' ID)+)? (Template)? ('*' | '&' | '[]')?
;

Template:
    '<' Type '>'
;


Expression:
	LogicalOrExpression | OrderExpression
;

LogicalOrExpression returns Expression:
	LogicalAndExpression ({LogicalOrExpression.left=current} op=('||') right=LogicalAndExpression)*
;

LogicalAndExpression returns Expression:
	ComparisonExpression ({LogicalAndExpression.left=current} op=('&&') right=ComparisonExpression)*
;

ComparisonExpression returns Expression:
    // to skip AdditionExpression replace with MultiplicationExpression
    AdditionExpression ({ComparisonExpression.left=current} op=('=='|'!='|'<'|'<='|'>'|'>='|'in'|'like') right=AdditionExpression)*
;

AdditionExpression returns Expression:
	MultiplicationExpression ({AdditionExpression.left=current} op=('+'|'-'|'|'|'^') right=MultiplicationExpression)*
;

MultiplicationExpression returns Expression:
    // possible ops: 
    PrimaryExpression ({MultiplicationExpression.left=current} op=('*'|'/'|'%'|'<<'|'>>'|'&'|'&^') right=PrimaryExpression)*
;

/* 
 * This is a little hack to avoid superfluous UnaryExpression nodes in the EObject AST. 
 * Now, UnaryExpression nodes are generated only if a unary operator is detected. 
 * In addition, we prevent expressions like '!!a'. 
 */
PrimaryExpression returns Expression:
	UnaryExpression
	| SimplifiedPrimaryExpression
;

UnaryExpression:
    // possible ops:  
    op=('+'|'-'|'!'|'^') exp=SimplifiedPrimaryExpression 
;

SimplifiedPrimaryExpression returns Expression:
    Literal 
    | Operand 
    | FunctionCallExpression 
    | LiteralListExpression 
    | '(' LogicalOrExpression ')'
;

Operand:
    {Operand} operand=OperandName
;

OperandName:
    QualifiedName
;


LiteralListExpression:
    '[' values+=Literal (',' values+=Literal)* ']'
;


/*
 * Grammar rules to specify the order of actions/events/operations
 */

OrderExpression:
    {OrderExpression} 'order' exp=SequenceExpression
;


SequenceExpression returns OrderExpression:
    AlternativeExpression ({SequenceExpression.left=current} op=',' right=AlternativeExpression)*
;

AlternativeExpression returns OrderExpression:
    TermExpression ({AlternativeExpression.left=current} op='|' right=TermExpression)*
;


ExclusionExpression:
    op='!' exp=SimplifiedTermExpression
;

RepetitionExpression returns OrderExpression:
    SimplifiedTermExpression ({RepetitionExpression.expr=current} op=('?'|'*'|'+'))?
;

TermExpression returns OrderExpression:
    ExclusionExpression
    | RepetitionExpression
;


GroupingExpression returns OrderExpression:
    '(' SequenceExpression ')'
;

SimplifiedTermExpression returns OrderExpression:
    Terminal
    | GroupingExpression
;


Terminal:
    {Terminal} entity=ID '.' op=ID '()'
;

FunctionCallExpression:
    name=QualifiedName ( '()' | '(' (args+=Argument (',' args+=Argument)*)? ')' )
;

Argument:
    LogicalOrExpression
;



RuleDeclaration:
	'rule' name=ID '{' stmt=RuleStatement '}'
;

RuleStatement:
	'using' entities+=AliasedEntityExpression (',' entities+=AliasedEntityExpression)* (cond=ConditionStatement)? ensure=EnsureStatement 'onfail' msg=ID
;

AliasedEntityExpression:
    e=[EntityDeclaration|QualifiedName] 'as' n=ID
;

ConditionStatement:
    'when' exp=LogicalOrExpression
;


EnsureStatement:
    'ensure' exp=Expression
;



//EvidenceDeclaration:
//    'evidence' name=[EntityDeclaration] '{' (stmts+=EvidenceStatement ';')+ '}'
//;
//
//EvidenceStatement:
//    CallStatement | DeclarationStatement | ImportStatement
//;

CallStatement:
    'call' (forbidden='forbidden')? call=FunctionDeclaration /* ('where' cond=WhereExpression)? */
;

FunctionDeclaration:
    name=QualifiedName ( 
        '()' 
        | '(' (
                params+=ELLIPSIS
                | ( params+=ID ( ',' params+=ID )* )
                | ( params+=ID ',' ( params+=ID ',' )* params+=ELLIPSIS ) 
            ) ')'
    )
;

//ImportStatement:
//    'incl' name=(ID | JavaImport | CppInclude)
//;

//JavaImport:
//    ID ('.' ID)+
//;
//
//CppInclude:
//    ID ('/' ID)+ ('.' ID)?
//;


OpDeclaration:
    'op' name=ID '{' (stmts+=OpStatement)* '}'
;

OpStatement:
    (forbidden='forbidden')? (var=ID '=')? call=FunctionDeclaration ';'
;

//MessageDeclaration:
//	'message' name=QualifiedName '{' msg=MessageStatement '}'
//;
//
//MessageStatement:
//	s=MessageSeverity
//	l=MessageLanguage?
//	c=MessageContent	
//;
//
//MessageSeverity:
//	'severity' severity=('error'|'warning'|'info'|'debug') ';'
//;
//
//MessageLanguage:
//	'lang' language=ID ';' 
//;
//
//MessageContent:
//	'content' content=StringLiteral ';'
//;

//ObjectIdentifier:
//    ('OID.')? INT ('.' INT)*
//;



LiteralList:
	lit+=Literal (',' lit+=Literal)*
;



Literal:
	{IntegerLiteral} value=IntegerLiteral 
	| {BooleanLiteral} value=BooleanLiteral 
	| {StringLiteral} value=StringLiteral
;

IntegerLiteral:
	INT	
	| HEX
;

BooleanLiteral:
	'true' 
	| 'false'
;

StringLiteral:
	STRING
;


// Common

DotQualifiedIdentifier:
    ID ( '.' ID )*
;


// Tokens 

terminal ELLIPSIS:
    '...'
;

terminal HEX:
	'0x' (HEX_DIGIT)+
;

terminal fragment HEX_DIGIT:
	DIGIT 
	| 'a'..'f' 
	| 'A'..'F'
;

terminal fragment DIGIT:
	'0'..'9' 
;
