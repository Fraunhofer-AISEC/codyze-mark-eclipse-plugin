package botan


entity Botan::Cipher_Mode isa Cipher {
	
	var algorithm : cpp:std::String;
	var direction : cpp:Botan::Cipher_Dir;
	var provider : cpp:std::String;
	var key : cpp:Botan::SymmetricKey;
	var iv : cpp:Botan::InitializationVector;
	var input : cpp:_::_;  // e.g. Botan::secure_vector<uint8_t>
	var input_length : cpp:std::size_t;
	
	
	op create(algorithm) {
		call Botan::get_cipher_mode(algorithm, direction);
		call Botan::get_cipher_mode(algorithm, direction, provider);

		/* this is only for botan version >= 2.6.0  
		call Botan::Cipher_Mode::create(algorithm, direction);
		call Botan::Cipher_Mode::create(algorithm, direction, provider);
	
		call Botan::Cipher_Mode::create_or_throw(algorithm, direction);
		call Botan::Cipher_Mode::create_or_throw(algorithm, direction, provider); 
		*/
	}
	
	op init() {
		call Botan::Cipher_Mode::set_key(key);
		//forbidden call Botan::Cipher_Mode::set_key(const uint8_t[], size_t)
	}
	
	op start() {
    	// forbidden: call Botan::Cipher_Mode::start();
		call Botan::Cipher_Mode::start(iv);
		// forbidden: call Botan::Cipher_Mode::start(const uint8_t[], size_t);
		// forbidden: call Botan::Cipher_Mode::start_msg(const uint8_t[], size_t);
	}
	
	op process() {
		call Botan::Cipher_Mode::process(input, input_length);
		
		call Botan::Cipher_Mode::update(input);
		call Botan::Cipher_Mode::update(input, size_t);
	}
	
	op finish() {
		call Botan::Cipher_Mode::finish(input); // Botan::secure_vector<uint8_t>&
		call Botan::Cipher_Mode::finish(input, size_t); // Botan::secure_vector<uint8_t>&
	}
	
	op reset() {
		call Botan::Cipher_Mode::reset();
	}
	
	order create, init, start, /*process*,*/ finish, reset?;
	
}


rule BlockCiphers {
	for Botan::Cipher_Mode 
	ensure
		_split(algorithm, "/", 0) in [ "AES" ]
	onfail WrongBlockCipher
}

rule UseRandomIV {
	for Botan::Cipher_Mode
	when _split(algorithm, "/", 1) == "CBC" && direction == Botan::Cipher_Dir::ENCRYPTION
	ensure
		_def(iv, Botan_AutoSeededRNG.generate())
	onfail NoRandomIV
}


//rule OnlyAES_256 {
//	for Botan_CipherMode
//	when _part(1, "/", algorithm) == "AES"
//	ensure
//		_length(key) == 256
//}
