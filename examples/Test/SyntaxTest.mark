package de.fhg.aisec.mark.crypto.base

entity SyntaxTest isa BlockCipher {

	// just testing expression syntax
	var lkasdf : uint where (123 || true) != 1 && (false) || a || a * 1 | 1 + (1 + 2 * 3) ^ (!a);
	
	var test where a++(!(a+1));
	
	var key : java:javax.crypto.SecretKey;
	var key : (cpp:Botan::OctetString | cpp:Botan::SymmetricKey | cpp:std::vector<uint8_t> | cpp:Botan::secure_vector<uint_8>);
}


order a;


evidence AES {
	call Botan::test(String, _);
	call Botan::Cipher_Mode::create(algorithm, _) 
		where algorithm in "AES" 
			&& algorithm like "AES%";
	decl Botan::Cipher;
	incl a/b.hl;
}

evidence AES {
	call Botan::Cipher_Mode::create(algorithm, _) 
		where algorithm like "AES_128";
}


OID.1.23.12312312.1
