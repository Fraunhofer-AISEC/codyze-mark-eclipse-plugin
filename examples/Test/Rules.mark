package test

/**
 * MARK-Beispiel für symmetrische Kryptographie (AES) mit Bouncycastle.
 * 
 */
entity Key {		// Beispiel für ein MARK-Konzept, das gleichzeitig einem Java-Typ entspricht
	var key;
	var algorithm;
	
	op create {
		SecretKeySpec(key, algorithm);  // references the constructor		
		this = SecretKeySpec(key, algorithm);			  // Alternativ: mit Zuweisung an this (= dieses javax.crypto.Key-Konzept)		
		
		// TODO Unklar: Hier wird immer nur mit "call" auf Methodenaufrufe referenziert,  
		//decl key = generateSomeKey()   ??
	}
	
	op destroy {
		this.destroy();   // Referenz auf this erfordert Zuweisung an this in create()
	}
}

entity MyBouncycastleCipher {
	var key : Key;
	var algorithm;		// java.lang.String referenziert den konkreten Java-Typ. Es KANN aber auch ein MARK-Konzept hierfür geben, falls weitere Attribute des String-Typs in den Regeln verwendet würden
	var mode: int;
	var parms: AlgorithmParameters;  // Referenziert den Java-Typ. Keine weitere MARK-Definition hierzu
	
	op create {
		Cipher.getInstance(algorithm);  // Referenziert Signatur Cipher.getInstance(String) und befüllt die Variable "algorithm"
	}
	
	op init {
		Cipher.init(mode, key, parms);  // Referenziert Signatur Cipher.init(int, javax.crypto.Key, java.security.AlgorithmParameters)
	}
	
	// TODO  update, final

}

rule MyCipherRule {
	using MyCipher as c						// Gilt für MyCipher und alle Subklassen (d.h. MyCipher und MyBouncyCastleCipher)
	ensure 
		order c.create(), c.init(), c.update()?, c.final()  // Mapped auf "op"-Operationen des "Cipher"-Konzeptes
	onfail WrongOrderOfOperations
}
